.if !\n(.g \{\
.   if !\w|\*(lq| \{\
.       ds lq ``
.       if \w'\(lq' .ds lq "\(lq
.   \}
.   if !\w|\*(rq| \{\
.       ds rq ''
.       if \w'\(rq' .ds rq "\(rq
.   \}
.\}
.
.ie \n[.g] .mso www.tmac
.el \{\
. de MTO
\\$2 \(laemail: \\$1 \(ra\\$3
..
. de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.\}

.TH ROCPMD 1

.SH NAME
ROCPMD \- Power management daemon for Red Oak Canyon power management boards
.SH SYNOPSIS
.B rocpmd 
[\fIOPTIONS\fR]

.SH DESCRIPTION
\fBrocpmd\fR is a daemon that interfaces with a Read Oak Canyon power managment expansion for the Raspberry PI board computer. The daemon provides a number of functions including a socket server that enables the remote querying of the battery battery level over a berkley socket, logging of battery levels to a separate file (rotated on each system start) and the graceful shutdown of the Raspberry PI by either a button press by the user or when the daemon detects the battery is about to be depleted.

.SH STARTING AND STOPPING THE DAEMON
The \fBrocpmd\fR daemon can be started manually by issuing the following command:

    sudo /etc/init.d/rocpmd.sh start

To stop the daemon issuing the command:

    sudo /etc/init.d/rocpmd.sh stop

will cause \fBrocpmd\fR to stop execution gracefully.

If the daemon is already running and it is necessary to restart it (for example, to re-read the configuration file) issue the command:

    sudo /etc/init.d/rocpmd.sh restart


.SH OPTIONS
.SS Generic daemon options

.TP
.BR \fB\-\^\-config-path\fR  " <directory path>"
Path of the directory where the configuration file resides (default: /etc), the directory must contain a configuration file named \fBrocpmd.conf\fR.

.TP
.BR \fB\-\^\-no-daemon\fR
Do not allow \fBrocpmd\fR to daemonize but run instead as a regular process.

.TP
\fB\-\^\-verbose\fR
.BR
Verbose output during startup. Useful in combination with \fB\-\^\-no-daemon\fR option

.TP
.BR \fB\-\^\-help\fR
Output a usage message and exit.

.SS Network options
.TP
.BR \fB\-\^\-socket\fR
Causes \fBrocpmd\fR to spawn a berkley socket server that allows a remote process to query the battery status.

.SS Power level functions
.TP
.BR \fB\-\^\-power-off\fR
The daemon sends the OFF signal to the power board causing the power to the Raspberry PI to be cut immediately and the board to enter the POWER_OFF state. The daemon exits immediately afterwards rather than going into daemon mode. (This is not a safe shutdown!)

.TP
.BR \fB\-\^\-battery-level\fR
Output the current battery level in percent. The daemon exits immediately afterwards rather than going into daemon mode.

.TP
.BR \fB\-\^\-battery-level-raw\fR
Outputs the current battery level in batterly level comparator increments. The daemon exits immediately afterwards rather than going into daemon mode.


.SH "THE DAEMON CONFIGURATION FILE"
The configuration file configures four functions.  It defines the hardware wiring between the power board signal names and the GPIO port numbers, allows for tuning the frequency and timing of the battery level measurement, enables/disables battery level logging, and defines a powermap that maps raw battery comparator level values to a percentage of battery left.
 
The \fBrocpmd\fR configuration file is written in the 
.URL http://en.wikipedia.org/wiki/YAML/ "YAML"
, human readable data serialzation format. By default the \fBrocpmd\fR configuration file is named \fBrocpmd.conf\fR and resides in the /etc directory. 

.TP
.BR "GPIO \fBPower board general input/output signals\fR"

The GPIO section defines the mapping and configuration (input/output/pull-up/down) of the general purpose input/output (GPIO) pins used by the Red Oak power managment board. These values do not need to be modified unless the GPIO connections on the power board itself have been modified, for example, to adapt the board to a Raspberry Pi Rev B, or to resolve other GPIO conflicts. 


\fIOFF\fR \- (GPIO output) Toggling this signal high once is logically equivalent to pressing the power switch on the board one time.  It causes the internal state machine to advance one step (see OPERATION, below).

\fIREQ_OFF\fR \- (GPIO input) Indicates to \fBrocpmd\fR that the operating system should be shut down, typically due to a button press by the user.  Note that if the power board is in POWER_ON state, and an OFF is sent to the board, the board state moves to the REQ_OFF state and the REQ_OFF signal is asserted.  Note this is an open drain signal and requires a pull-up.

\fICS\fR \- (GPIO output) Setting this signal low enables programming of the battery level comparator circuit. (See battery level measurement below.)

\fIUD\fR \- (GPIO output) Each time this signal is toggled high the power board's internal battery comparator level is actuated once, either up or down. The circuit has 64 discrete comparator levels (although all levels are not useful). If UD is high when the CS signal goes low, on the next rising edge of UD, the comparator level is incremented once. If UD is low when the CS signal goes low, on the next rising edge of UD, the comparator level is decremented once. (See battery level measurement below.) 

\fIPGOOD\fR \- (GPIO input) This signal will be set high if the power management board's internal battery comparator detects that the battery level is above the currently programmed comparator level.  It will be low otherwise. Note this is an open drain signal and requires a pull-up.

\fID1\fR \- (GPIO input) If the battery is being charged this signal is set to high, if the board is done charging it is set to low.

\fID2\fR \- (GPIO input) If the power management board is connected to a power supply this signal is set to high, otherwise it is set to low.

.TP 
.B battery-level-reader

This section of the configuration file controls the tuning of the frequency and timing of the battery level measurment routine, and enables/disables battery level logging.

\fIbattery-level-interval\fR \- The interval in seconds between battery level checks.

\fIbattery-level-gpio-delay\fR \- The delay in microseconds after each time the logic level of GPIO signal is changed during battery level checks. 

\fIbattery-level-log\fR \- If set to 'true' a battery level log is written to /var/log/rocpmd-battery-level.log.

.TP
.B powermap
.br

The powermap is an array of values that map the battery voltage (in compartor level units) output by the power board's internal battery level measurement circuit to percentages of battery left.  The powermap for a specific application and/or battery load condition can be customized by using the daemon function \fB\-\^\-battery-level-raw\fR to observe the battery discharge curve in compartor units over time, and then establishing the percentage battery remaining. 

The power board contains a buck/boost (DC-DC) converter that enables the board to supply 5V for battery volages that vary between 4.2V and 2.7V.  Before modifying the map, or using a battery other than the one shipped with the power board, the user should uderstand the total system current load at 5V (ie, the system power) and ensure that when the battery is in a low voltage state (ie, at 2.7V) the current does not exceed the battery's specifications or discharge rate (current = power/(2.7V * .85)). (The .85 factor is to account for the conveter efficiency.) 

.SH "OPERATION"

.TP 

.TP
\fBThe Power Board State Machine\fR
The power functions of the Red Oak Canyon power management board is a simple state machine controlled by the OFF signal or the power button on the board. 
The state machine has three states \fBPOWER_OFF\fR, \fBPOWER_ON\fR, and \fBREQ_OFF\fR: 
.br
.BR
\fB    POWER_OFF\fR \-\-[button press]\-\-> \fBPOWER_ON\fR \-\-[button press or OFF toggled high]\-\->
.BR
\fB    REQ_OFF\fR \-\-[putton press or OFF toggled high]\-\-> \fBPOWER_OFF\fR

.TP
\fBPowering on the Raspberry Pi\fR
.br
With the device powered off the user presses the momentary on/off button causing the power management board move to the \fBPOWER_ON\fR state and supply power to the Raspberry PI, which then boots by power-on-reset. 

.TP
\fBUser initiated shutdown by button\fR
.br
When the Raspberry Pi is powered, if the user presses the momentary on/off button, the power board progresses to the \fBREQ_OFF\fR state and asserts the REQ_OFF signal to the Raspberry PI. 

REQ_OFF is monitored by the \fBrocpmd\fR daemon.  When it detects that the signal went high, it initiates a graceful shutdown of the Linux operating system. As a final step in the shutdown sequence, an instance of the daemon running in command mode asserts a final OFF signal to the power management board causing it to progress from \fBREQ_OFF\fR to the \fBPOWER_OFF\fR state and cut power to the Raspberry PI. 

.TP
\fBAutomatic shutdown due to low battery level\fR
.br
When the \fBrocpmd\fR daemon detects a low battery condition via the battery level test, it initiates a safe shutdown of the Linux operating system via the system shutdown command.   As a final step to the shutdown squence, the \fBrocpmd\fR daemon running in command mode asserts the OFF signal twice to advance the state machine from \fBPOWER_ON\fR, through the \fBREQ_OFF\fR state, to the \fBPOWER_OFF\fR state and cut power to the Raspberry PI. 

.TP
\fBUser initiated shutdown Shutdown command\fR
.br
If the OS is shutdown using the shutdown -h -P now  command, the system will shutdown.   As a final step to the shutdown squence, the \fBrocpmd\fR daemon running in command mode asserts the OFF signal twice to advance the state machine from \fBPOWER_ON\fR, through the \fBREQ_OFF\fR state, to the \fBPOWER_OFF\fR state and cut power to the Raspberry PI. 

.TP
\fBEmergency Manual Shutdown\fR
.br
If, after pressing the momentary on/off button, the power to the Raspberry PI is not eventuall cut for some reason (for example because it never received the OFF signal from \fBrocpmd\fR) a second button press will cut the power to the Raspberry PI immediately.  This is not a safe shutdown.

.TP
\fBHow the daemon performs a battery level test\fR
.br
To check the battery level \fBrocpmd\fR first resets the board comparator by setting the UD signal high, then (sequentially) setting the CS signal low, and then toggling the UD signal 64 times. After 64 UD pulses, the CS signal is set high again.  This ensures the battery level comparator is set to a known condition (railed). 

To establish the battery level, the UD signal is set low, then the CS signal is set to low, and the UD signal is toggled until PGOOD signal changes from high to low.  The CS signal is then set high. The number of UD pulses required for the PGOOD signal to go low (the raw value) is then mapped to a percentage battery remaining using the power level map array that \fBrocpmd\fR read from the configuration file.



.SS SEE ALSO
The project source code can be obtained at 
.URL https://github.com/readoakcanyon/HATPowerBoard/ "GitHub"

